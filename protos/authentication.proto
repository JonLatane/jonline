syntax = "proto3";

package jonline;

import "google/protobuf/timestamp.proto";
import "users.proto";

// Request to create a new account.
message CreateAccountRequest {
  // Username for the account to be created. Must not exist.
  string username = 1;
  // Password for the account to be created. Must be at least 8 characters.
  string password = 2;
  // Email to be used as a contact method.
  optional ContactMethod email = 3;
  // Phone number to be used as a contact method.
  optional ContactMethod phone = 4;
  // Request an expiration time for the Auth Token returned. By default it will not expire.
  optional google.protobuf.Timestamp expires_at = 5;
  // (Not yet implemented.) The name of the device being used to create the account.
  optional string device_name = 6;
}

// Request to login to an existing account.
message LoginRequest {
  // Username for the account to be logged into. Must exist.
  string username = 1;
  // Password for the account to be logged into.
  string password = 2;
  // Request an expiration time for the Auth Token returned. By default it will not expire.
  optional google.protobuf.Timestamp expires_at = 3;
  // (Not yet implemented.) The name of the device being used to login.
  optional string device_name = 4;
  // (TODO) If provided, username is ignored and login is initiated via user_id instead.
  optional string user_id = 5;
}

// Request to create a new third-party refresh token. Unlike `LoginRequest` or `CreateAccountRequest`, the user must be logged in to create a third-party refresh token.
//
// Generally, this is used to create a refresh token for another Jonline instance,
// e.g., accessing `bullcity.social/jon`'s data from `jonline.io`. On the web side, this is implemented as follows:
//
// 1. When the `bullcity.social` user wants to login on `jonline.io`, `bullcity.social` will redirect 
// the user to `jonline.io/third_party_auth?to=bullcity.social`.
// 2. `jonline.io` will force the user to login if needed on this page.
// 3. `jonline.io` will prompt/warn the user, and then call this RPC to create a refresh + access token for `bullcity.social`.
// 4. `jonline.io` will redirect the user back to `bullcity.social/third_party_auth?from=jonline.io&token=<Base64RefreshTokenResponse>` with the refresh token POSTed in form data.
//     * (`<Base64RefreshTokenResponse>` is a base64-encoded `RefreshTokenResponse` message.)
// 6. `bullcity.social` will ensure it can `GetCurrentUser` on `jonline.io` with its new auth token.
// 5. `bullcity.social` will replace the current location with `bullcity.social/third_party_auth?from=jonline.io`.
// 7. `bullcity.social` will use the access token to make requests to `jonline.io` (the same as with `bullcity.social`).
//
// Note that refresh tokens
message CreateThirdPartyRefreshTokenRequest {
  // The third-party refresh token's expiration time.
  optional google.protobuf.Timestamp expires_at = 2;
  // The third-party refresh token's user ID.
  string user_id = 3;
  // The third-party refresh token's device name.
  string device_name = 4;
}


// Returned when creating an account, logging in, or creating a third-party refresh token.
message RefreshTokenResponse {
  // The persisted token the device should store and associate with the account.
  // Used to request new access tokens.
  ExpirableToken refresh_token = 1;
  // An initial access token provided for convenience.
  ExpirableToken access_token = 2;
  // The user associated with the account that was created/logged into.
  User user = 3;
}

// Generic type for refresh and access tokens.
message ExpirableToken {
  // The secure token value.
  string token = 1;
  // Optional expiration time for the token. If not set, the token will not expire.
  optional google.protobuf.Timestamp expires_at = 2;
}

// Request for a new access token using a refresh token.
message AccessTokenRequest {
  // The refresh token to use to request a new access token.
  string refresh_token = 1;
  // Optional *requested* expiration time for the token. Server may ignore this.
  optional google.protobuf.Timestamp expires_at = 2;
}

// Returned when requesting access tokens.
message AccessTokenResponse {
  // If a refresh token is returned, it should be stored. Old refresh tokens may expire *before*
  // their indicated expiration.
  // See: https://auth0.com/docs/secure/tokens/refresh-tokens/refresh-token-rotation
  optional ExpirableToken refresh_token = 1;
  // The new access token.
  ExpirableToken access_token = 2;
}

// Request to reset a password.
message ResetPasswordRequest {
  // If not set, use the current user of the request.
  optional string user_id = 1;
  // The new password to set.
  string password = 3;
}

// Response for `GetUserRefreshTokens` RPC. Returns all refresh tokens associated with the current user.
message UserRefreshTokensResponse {
  // The refresh tokens associated with the current user.
  repeated RefreshTokenMetadata refresh_tokens = 1;
}

// Metadata on a refresh token for the current user, used when managing refresh tokens as a user.
// Does not include the token itself.
message RefreshTokenMetadata {
  // The DB ID of the refresh token. Used when deleting the token or updating the device_name.
  uint64 id = 1;
  // Expiration date of the refresh token.
  optional google.protobuf.Timestamp expires_at = 2;
  // The device name the refresh token is on. User-updateable.
  optional string device_name = 3;
  // Whether the refresh token is associated with the current device
  // (based on what user is making the request).
  bool is_this_device = 4;
  bool third_party = 5;
}
