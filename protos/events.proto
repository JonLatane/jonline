syntax = "proto3";

package jonline;

import "google/protobuf/timestamp.proto";
import "posts.proto";
import "visibility_moderation.proto";
import "users.proto";
import "location.proto";

// Valid GetEventsRequest formats:
// - {[listing_type: PublicEvents]}                  (TODO: get ServerPublic/GlobalPublic events you can see)
// - {listing_type:MyGroupsEvents|FollowingEvents}   (TODO: get events for groups joined or user followed; auth required)
// - {event_id:}                                     (TODO: get single event including preview data)
// - {listing_type: GroupEvents|
//      GroupEventsPendingModeration,
//      group_id:}                                  (TODO: get events/events needing moderation for a group)
// - {author_user_id:, group_id:}                   (TODO: get events by a user for a group)
// - {listing_type: AuthorEvents, author_user_id:}  (TODO: get events by a user)
message GetEventsRequest {
  // Returns the single event with the given ID.
  optional string event_id = 1;
  // Limits results to replies to the given event.
  // optional string replies_to_event_id = 2;
  // Limits results to those by the given author user ID.
  optional string author_user_id = 2;
  optional string group_id = 3;
  optional string event_instance_id = 4;
  optional TimeFilter time_filter = 5;
  EventListingType listing_type = 10;
}

// Time filter that simply works on the starts_at and ends_at fields.
message TimeFilter {
  optional google.protobuf.Timestamp starts_after = 1;
  optional google.protobuf.Timestamp ends_after = 2;
  optional google.protobuf.Timestamp starts_before = 3;
  optional google.protobuf.Timestamp ends_before = 4;
}

enum EventListingType {
  // Gets SERVER_PUBLIC and GLOBAL_PUBLIC events as is sensible.
  // Also usable for getting replies anywhere.
  PUBLIC_EVENTS = 0;
  // Returns events from users the user is following.
  FOLLOWING_EVENTS = 1;
  // Returns events from any group the user is a member of.
  MY_GROUPS_EVENTS = 2;
  // Returns `DIRECT` events that are directly addressed to the user.
  DIRECT_EVENTS = 3;
  EVENTS_PENDING_MODERATION = 4;

  // group_id parameter is required for these.
  GROUP_EVENTS = 10;
  GROUP_EVENTS_PENDING_MODERATION = 11;
}


message GetEventsResponse {
  repeated Event events = 1;
}

message Event {
  string id = 1;
  Post post = 2;
  EventInfo info = 3;
  repeated EventInstance instances = 4;
}

// To be used for ticketing, RSVPs, etc.
// Stored as JSON in the database.
message EventInfo {

}

message EventInstance {
  string id = 1;
  string event_id = 2;
  optional Post post = 3;
  EventInstanceInfo info = 4;
  google.protobuf.Timestamp starts_at = 5;
  google.protobuf.Timestamp ends_at = 6;
  optional Location location = 7;
}

// To be used for ticketing, RSVPs, etc.
// Stored as JSON in the database.
message EventInstanceInfo {

}

// EventInstance attendance statuses. State transitions may generally happen
// in any direction, but:
// * `REQUESTED` can only be selected if another user invited the user whose attendance is being described.
// * `GOING` and `NOT_GOING` cannot be selected if the EventInstance has ended (end time is in the past).
// * `WENT` and `DID_NOT_GO` cannot be selected if the EventInstance has not started (start time is in the future).
// `INTERESTED` and `REQUESTED` can apply regardless of whether an event has started or ended.
enum AttendanceStatus {
  // The user is interested in attending. This is the default status.
  INTERESTED = 0;
  // Another user has invited the user to the event.
  REQUESTED = 1;
  // The user plans to go to the event.
  GOING = 2;
  // The user does not plan to go to the event.
  NOT_GOING = 3;
  // The user went to the event.
  WENT = 10;
  // The user did not go to the event.
  DID_NOT_GO = 11;
}

// Describes the attendance of a user at an `EventInstance`. Such as:
// * A user's RSVP to an `EventInstance`.
// * Invitation status of a user to an `EventInstance`.
// * `ContactMethod`-driven management for anonymous RSVPs to an `EventInstance`.
//
// `EventAttendance.status` works like a state machine, but state transitions are governed only 
// by the current time and the start/end times of `EventInstance`s:
// * Before an event starts, EventAttendance essentially only describes RSVPs and invitations.
// * After an event ends, EventAttendance describes what RSVPs were before the event ended, and users can also indicate 
// they `WENT` or `DID_NOT_GO`. Invitations can no longer be created.
// * During an event, invites, can be sent, RSVPs can be made, *and* users can indicate they `WENT` or `DID_NOT_GO`.
message EventAttendance {
  string event_instance_id = 1;
  oneof attendee {
    string user_id = 2;
    AnonymousAttendee anonymous_attendee = 3;
  }
  uint32 number_of_guests = 4;
  AttendanceStatus status = 5;
  optional string inviting_user_id = 6;
  string private_note = 7;
  string public_note = 8;
  Moderation moderation = 9;
  google.protobuf.Timestamp created_at = 10;
  optional google.protobuf.Timestamp updated_at = 11;
}

// The visibility on `AnonymousAttendee` `ContactMethod`s support the `LIMITED` visibility, which will
// make them visible to the event creator.
message AnonymousAttendee {
  string name = 1;
  // The visibility on `AnonymousAttendee`
  repeated ContactMethod contact_methods = 2;
}
