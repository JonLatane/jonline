syntax = "proto3";

package jonline;

import "google/protobuf/timestamp.proto";
import "posts.proto";
import "media.proto";
import "visibility_moderation.proto";
import "users.proto";
import "location.proto";

// Request to get Events in a formatted *per-EventInstance* structure. i.e. the response will carry duplicate `Event`s with the same ID
// if that `Event` has multiple `EventInstance`s in the time frame the client asked for.
//
// These structured EventInstances are ordered by start time unless otherwise specified (specifically, `EventListingType.NEWLY_ADDED_EVENTS`).
//
// Valid GetEventsRequest formats:
// - `{[listing_type: PublicEvents]}`                 (TODO: get ServerPublic/GlobalPublic events you can see)
// - `{listing_type:MyGroupsEvents|FollowingEvents}`  (TODO: get events for groups joined or user followed; auth required)
// - `{event_id:}`                                    (TODO: get single event including preview data)
// - `{listing_type: GroupEvents| GroupEventsPendingModeration, group_id:}`
//                                                    (TODO: get events/events needing moderation for a group)
// - `{author_user_id:, group_id:}`                   (TODO: get events by a user for a group)
// - `{listing_type: AuthorEvents, author_user_id:}`  (TODO: get events by a user)
message GetEventsRequest {
  // Returns the single event with the given ID.
  optional string event_id = 1;
  // Limits results to those by the given author user ID.
  optional string author_user_id = 2;
  // Limits results to those in the given group ID (via `GroupPost` association's for the Event's internal `Post`).
  optional string group_id = 3;
  // Limits results to those with the given event instance ID.
  optional string event_instance_id = 4;
  // Filters returned `EventInstance`s by time.
  optional TimeFilter time_filter = 5;
  // If set, only returns events that the given user is attending. If `attendance_statuses` is also set, 
  // returns events where that user's status is one of the given statuses.
  optional string attendee_id = 6;
  // If set, only return events for which the current user's attendance status matches one of the given statuses. If `attendee_id` is also set,
  // only returns events where the given user's status matches one of the given statuses.
  repeated AttendanceStatus attendance_statuses = 7;
  // (TODO) Finds the Event for the Post with the given ID. The Post should have a `PostContext` of `EVENT` or `EVENT_INSTANCE`.
  optional string post_id = 8;
  // (TODO) Finds events that have an instance with the given post IDs. The Post should have a `PostContext` of `EVENT_INSTANCE`.
  // Faciliates using the StarredPost APIs to get events.
  repeated string instance_post_id = 9;
  // The listing type, e.g. `ALL_ACCESSIBLE_EVENTS`, `FOLLOWING_EVENTS`, `MY_GROUPS_EVENTS`, `DIRECT_EVENTS`, `GROUP_EVENTS`, `GROUP_EVENTS_PENDING_MODERATION`.
  EventListingType listing_type = 10;
}

// Time filter that works on the `starts_at` and `ends_at` fields of `EventInstance`.
// API currently only supports `ends_after`.
message TimeFilter {
  // Filter to events that start after the given time.
  optional google.protobuf.Timestamp starts_after = 1;
  // Filter to events that end after the given time.
  optional google.protobuf.Timestamp ends_after = 2;
  // Filter to events that start before the given time.
  optional google.protobuf.Timestamp starts_before = 3;
  // Filter to events that end before the given time.
  optional google.protobuf.Timestamp ends_before = 4;
}

// The listing type, e.g. `ALL_ACCESSIBLE_EVENTS`, `FOLLOWING_EVENTS`, `MY_GROUPS_EVENTS`, `DIRECT_EVENTS`, `GROUP_EVENTS`, `GROUP_EVENTS_PENDING_MODERATION`.
//
// Events returned are ordered by start time unless otherwise specified (specifically, `NEWLY_ADDED_EVENTS`).
enum EventListingType {
  // Gets `SERVER_PUBLIC` and `GLOBAL_PUBLIC` events depending on whether the user is logged in, `LIMITED` events from authors the user is following, and `PRIVATE` events owned by, or directly addressed to, the current user.
  ALL_ACCESSIBLE_EVENTS = 0;
  // Returns events from users the user is following.
  FOLLOWING_EVENTS = 1;
  // Returns events from any group the user is a member of.
  MY_GROUPS_EVENTS = 2;
  // Returns `DIRECT` events that are directly addressed to the user.
  DIRECT_EVENTS = 3;
  // Returns events pending moderation by the server-level mods/admins.
  EVENTS_PENDING_MODERATION = 4;

  // Returns events from a specific group. Requires group_id parameterRequires group_id parameter
  GROUP_EVENTS = 10;
  // Returns pending_moderation events from a specific group. Requires group_id
  // parameter and user must have group (or server) admin permissions.
  GROUP_EVENTS_PENDING_MODERATION = 11;

  // Returns events from either `ALL_ACCESSIBLE_EVENTS` or a specific author (with optional author_user_id parameter).
  // Returned EventInstances will be ordered by creation time rather than start time.
  NEWLY_ADDED_EVENTS = 20;
}

// A list of `Event`s with a maybe-incomplete (see [`GetEventsRequest`](#geteventsrequest)) set of their `EventInstance`s.
//
// Note that `GetEventsResponse` may often include duplicate Events with the same ID.
// I.E. something like: `{events: [{id: a, instances: [{id: x}]}, {id: a, instances: [{id: y}]}, ]}` is a valid response.
// This semantically means: "Event A has both instances X and Y in the time frame the client asked for."
// The client should be able to handle this.
//
// In the React/Tamagui client, this is handled by the Redux store, which
// effectively "compacts" all response into its own internal Events store, in a form something like:
// `{events: {a: {id: a, instances: [{id: x}, {id: y}]}, ...}, instanceEventIds: {x:a, y:a}}`.
// (In reality it uses `EntityAdapter` which is a bit more complicated, but the idea is the same.)
message GetEventsResponse {
  repeated Event events = 1;
}

// An `Event` is a top-level type used to organize calendar events, RSVPs, and messaging/posting
// about the `Event`. Actual time data lies in its `EventInstances`.
//
// (Eventually, Jonline Events should also support ticketing.)
message Event {
  // Unique ID for the event generated by the Jonline BE.
  string id = 1;
  // The Post containing the underlying data for the event (names). Its `PostContext` should be `EVENT`.
  Post post = 2;
  // Event configuration like whether to allow (anonymous) RSVPs, etc.
  EventInfo info = 3;
  // A list of instances for the Event. *Events will only include all instances if the request is for a single event.*
  repeated EventInstance instances = 4;
}

// To be used for ticketing, RSVPs, etc.
// Stored as JSON in the database.
message EventInfo {
  // Whether to allow RSVPs for the event.
  optional bool allows_rsvps = 1;
  // Whether to allow anonymous RSVPs for the event.
  optional bool allows_anonymous_rsvps = 2;
  // Limit the max number of attendees. No effect unless `allows_rsvps` is true. Not yet supported.
  optional uint32 max_attendees = 3;
}

// The time-based component of an `Event`. Has a `starts_at` and `ends_at` time,
// a `Location`, and an optional `Post` (and discussion thread) specific to this particular
// `EventInstance` in addition to the parent `Event`.
message EventInstance {
  // Unique ID for the event instance generated by the Jonline BE.
  string id = 1;
  // ID of the parent `Event`.
  string event_id = 2;
  // Optional `Post` containing alternate name/link/description for this particular instance. Its `PostContext` should be `EVENT_INSTANCE`.
  Post post = 3;
  // Additional configuration for this instance of this `EventInstance` beyond the `EventInfo` in its parent `Event`.
  EventInstanceInfo info = 4;
  // The time the event starts (UTC/Timestamp format).
  google.protobuf.Timestamp starts_at = 5;
  // The time the event ends (UTC/Timestamp format).
  google.protobuf.Timestamp ends_at = 6;
  // The location of the event.
  optional Location location = 7;
}

// To be used for ticketing, RSVPs, etc.
// Stored as JSON in the database.
message EventInstanceInfo {
  // RSVP configuration and metadata for the event instance.
  optional EventInstanceRsvpInfo rsvp_info = 1;
}

// Consolidated type for RSVP info for an `EventInstance`.
// Curently, the `optional` counts below are *never* returned by the API.
message EventInstanceRsvpInfo {
  // Overrides `EventInfo.allows_rsvps`, if set, for this instance.
  optional bool allows_rsvps = 1;
  // Overrides `EventInfo.allows_anonymous_rsvps`, if set, for this instance.
  optional bool allows_anonymous_rsvps = 2;

  // Overrides `EventInfo.max_attendees`, if set, for this instance. Not yet supported.
  optional uint32 max_attendees = 3;

  // The number of users who have RSVP'd to the event.
  optional uint32 going_rsvps = 4;
  // The number of attendees who have RSVP'd to the event. (RSVPs may have multiple attendees, i.e. guests.)
  optional uint32 going_attendees = 5;

  // The number of users who have signaled interest in the event.
  optional uint32 interested_rsvps = 6;
  // The number of attendees who have signaled interest in the event. (RSVPs may have multiple attendees, i.e. guests.)
  optional uint32 interested_attendees = 7;

  // The number of users who have been invited to the event.
  optional uint32 invited_rsvps = 8;
  // The number of attendees who have been invited to the event. (RSVPs may have multiple attendees, i.e. guests.)
  optional uint32 invited_attendees = 9;
}

// EventInstance attendance statuses. State transitions may generally happen
// in any direction, but:
// * `REQUESTED` can only be selected if another user invited the user whose attendance is being described.
// * `GOING` and `NOT_GOING` cannot be selected if the EventInstance has ended (end time is in the past).
// * `WENT` and `DID_NOT_GO` cannot be selected if the EventInstance has not started (start time is in the future).
// `INTERESTED` and `REQUESTED` can apply regardless of whether an event has started or ended.
enum AttendanceStatus {
  // The user is (or was) interested in attending. This is the default status.
  INTERESTED = 0;
  // Another user has invited the user to the event.
  REQUESTED = 1;
  // The user plans to go to the event, or went to the event.
  GOING = 2;
  // The user does not plan to go to the event, or did not go to the event.
  NOT_GOING = 3;
}

// Request to get RSVP data for an event.
message GetEventAttendancesRequest {
  // The ID of the event to get RSVP data for.
  string event_instance_id = 1;
  // If set, and if the token has an RSVP for this even, request that RSVP data
  // in addition to the rest of the RSVP data. (The event creator can always
  // see and moderate anonymous RSVPs.)
  optional string anonymous_attendee_auth_token = 2;
}

// Response to get RSVP data for an event.
message EventAttendances {
  // The attendance data for the event, in no particular order.
  repeated EventAttendance attendances = 1;
}

// Could be called an "RSVP." Describes the attendance of a user at an `EventInstance`. Such as:
// * A user's RSVP to an `EventInstance` (one of `INTERESTED`, `GOING`, `NOT_GOING`, or , `REQUESTED` (i.e. invited)).
// * Invitation status of a user to an `EventInstance`.
// * `ContactMethod`-driven management for anonymous RSVPs to an `EventInstance`.
message EventAttendance {
  // Unique server-generated ID for the attendance.
  string id = 1;
  // ID of the `EventInstance` the attendance is for.
  string event_instance_id = 2;

  oneof attendee {
    // If the attendance is non-anonymous, core data about the user.
    UserAttendee user_attendee = 3;
    // If the attendance is anonymous, core data about the anonymous attendee.
    AnonymousAttendee anonymous_attendee = 4;
  }
  // Number of guests including the RSVPing user. (Minimum 1).
  uint32 number_of_guests = 5;
  // The user's RSVP to an `EventInstance` (one of `INTERESTED`, `REQUESTED` (i.e. invited), `GOING`, `NOT_GOING`)
  AttendanceStatus status = 6;
  // User who invited the attendee. (Not yet used.)
  optional string inviting_user_id = 7;
  // Public note for everyone who can see the event to see.
  string private_note = 8;
  // Private note for the event owner.
  string public_note = 9;
  // Moderation status for the attendance. Moderated by the `Event` owner (or `EventInstance` owner if applicable).
  Moderation moderation = 10;
  // The time the attendance was created.
  google.protobuf.Timestamp created_at = 11;
  // The time the attendance was last updated.
  optional google.protobuf.Timestamp updated_at = 12;
}

// An anonymous internet user who has RSVP'd to an `EventInstance`.
//
// (TODO:) The visibility on `AnonymousAttendee` `ContactMethod`s should support the `LIMITED` visibility, which will
// make them visible to the event creator.
message AnonymousAttendee {
  // A name for the anonymous user. For instance, "Bob Gomez" or "The guy on your front porch."
  string name = 1;
  // Contact methods for anonymous attendees. Currently not linked to Contact methods for users.
  repeated ContactMethod contact_methods = 2;
  // Used to allow anonymous users to RSVP to an event. Generated by the server
  // when an event attendance is upserted for the first time. Subsequent attendance
  // upserts, with the same event_instance_id and anonymous_attendee.auth_token,
  // will update existing anonymous attendance records. Invalid auth tokens used during upserts will always create a new `EventAttendance`.
  optional string auth_token = 3;
}


// Wire-identical to [Author](#author), but with a different name to avoid confusion.
message UserAttendee {
  // The user ID of the attendee.
  string user_id = 1;
  // The username of the attendee.
  optional string username = 2;
  // The attendee's user avatar.
  optional MediaReference avatar = 3;
}