syntax = "proto3";

package jonline;

import "google/protobuf/timestamp.proto";
import "users.proto";
import "permissions.proto";
import "visibility_moderation.proto";

message Group {
  string id = 1;
  string name = 2;
  optional string description = 3;
  optional bytes avatar = 4;
  repeated Permission default_membership_permissions = 5;
  // Valid values are PENDING (requires a moderator to let you join) and UNMODERATED.
  Moderation default_membership_moderation = 6;
  // LIMITED visibility groups are only visible to members. PRIVATE groups are only
  // visibile to users with the ADMIN group permission.
  Visibility visibility = 7;
  uint32 member_count = 8;
  optional Membership current_user_membership = 9;
  google.protobuf.Timestamp created_at = 10;
  optional google.protobuf.Timestamp updated_at = 11;
}

message Membership {
  string user_id = 1;
  string group_id = 2;
  // Valid Membership Permissions are:
  // * VIEW_POSTS, CREATE_POSTS, MODERATE_POSTS
  // * VIEW_EVENTS, CREATE_EVENTS, MODERATE_EVENTS
  // * ADMIN and MODERATE_USERS
  repeated Permission permissions = 3;
  // Tracks whether group moderators need to approve the membership.
  Moderation group_moderation = 4;
  // Tracks whether the user needs to approve the membership.
  Moderation user_moderation = 5;
  google.protobuf.Timestamp created_at = 6;
  optional google.protobuf.Timestamp updated_at = 7;
}

message GetGroupsRequest {
  optional string group_id = 1;
  optional string group_name = 2;
  GroupListingType listing_type = 3;
  optional int32 page = 4;
}

enum GroupListingType {
  ALL_GROUPS = 0;
  MY_GROUPS = 1;
  REQUESTED = 2;
  INVITED = 3;
}

message GetGroupsResponse {
  repeated Group groups = 1;
  bool has_next_page = 2;
}

// Used by group MODERATE_USERS mods to manage group requests from the People tab.
// See also: UserListingType.GROUP_REQUESTS.
message UserMembership {
  User user = 1;
  Membership membership = 2;
}
message GetUserMembershipsRequest {
  optional string group_id = 1;
  optional string username = 2;
  optional int32 page = 10;
}

message GetUserMembershipsResponse {
  repeated UserMembership user_memberships = 1;
  bool has_next_page = 2;
}
