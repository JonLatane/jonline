syntax = "proto3";

package jonline;

import "google/protobuf/empty.proto";

import "authentication.proto";
import "users.proto";
import "media.proto";
import "posts.proto";
import "events.proto";
import "groups.proto";
import "federation.proto";
import "server_configuration.proto";

// The internet-facing Jonline service implementing the Jonline protocol,
// generally exposed on port 27707 (see "HTTP-based client host negotiation" below for clarifications).
//
// Authenticated calls require an `access_token` in request metadata to be included
// directly as the value of the `authorization` header (with no `Bearer ` prefix).
// First, use the `CreateAccount` or `Login` RPCs to fetch (and store) an initial
// `refresh_token` and `access_token`. Use the `access_token` until it expires,
// then use the `refresh_token` to call the `AccessToken` RPC for a new one.
//
// ##### HTTP-based client host negotiation (for external CDNs)
// When negotiating the gRPC connection to a host, say, `jonline.io`, before attempting
// to connect to `jonline.io` via gRPC on 27707, the client
// is expected to first attempt to fetch `jonline.io/backend_host` over HTTP (port 80) or HTTPS (port 443)
// (depending upon whether the gRPC server is expected to have TLS). If the `backend_host` string resource
// is a valid domain, say, `jonline.io.itsj.online`, the client is expected to connect
// to `jonline.io.itsj.online` on port 27707 instead. To users, the server should still *generally* appear to 
// be `jonline.io`. This is to allow support for external CDNs as frontends. See https://jonline.io/about for
// more information about external CDN setup.
//
// Both Jonline's [React/Tamagui](https://github.com/JonLatane/jonline/blob/main/frontends/tamagui/packages/app/store/clients.ts) 
// and [Flutter](https://github.com/JonLatane/jonline/blob/main/frontends/flutter/lib/models/jonline_clients.dart) 
// clients already do this.
service Jonline {
  // Get the version (from Cargo) of the Jonline service. *Publicly accessible.*
  rpc GetServiceVersion(google.protobuf.Empty) returns (GetServiceVersionResponse) {}

  // Gets the Jonline server's configuration. *Publicly accessible.*
  rpc GetServerConfiguration(google.protobuf.Empty) returns (ServerConfiguration) {}

  // Creates a user account and provides a `refresh_token` (along with an `access_token`). *Publicly accessible.*
  rpc CreateAccount(CreateAccountRequest) returns (RefreshTokenResponse) {}

  // Logs in a user and provides a `refresh_token` (along with an `access_token`). *Publicly accessible.*
  rpc Login(LoginRequest) returns (RefreshTokenResponse) {}

  // Gets a new `access_token` (and possibly a new `refresh_token`, which should replace the old one in client storage), given a `refresh_token`. *Publicly accessible.*
  rpc AccessToken(AccessTokenRequest) returns (AccessTokenResponse) {}

  // Gets the current user. *Authenticated.*
  rpc GetCurrentUser(google.protobuf.Empty) returns (User) {}

  // Gets Users. *Publicly accessible **or** Authenticated.*
  // Unauthenticated calls only return Users of `GLOBAL_PUBLIC` visibility.
  rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {}

  // Update a user by ID. *Authenticated.*
  // Updating other users requires `ADMIN` permissions.
  rpc UpdateUser(User) returns (User) {}

  // Deletes a user by ID. *Authenticated.*
  // Deleting other users requires `ADMIN` permissions.
  rpc DeleteUser(User) returns (google.protobuf.Empty) {}

  // Follow (or request to follow) a user. *Authenticated.*
  rpc CreateFollow(Follow) returns (Follow) {}

  // Used to approve follow requests. *Authenticated.*
  rpc UpdateFollow(Follow) returns (Follow) {}

  // Unfollow (or unrequest) a user. *Authenticated.*
  rpc DeleteFollow(Follow) returns (google.protobuf.Empty) {}

  // Gets Media (Images, Videos, etc) uploaded/owned by the current user. *Authenticated.*
  rpc GetMedia(GetMediaRequest) returns (GetMediaResponse) {}

  // Deletes a media item by ID. *Authenticated.* Note that media may still be accessible for 12 hours after deletes are requested, as separate jobs clean it up from S3/MinIO.
  // Deleting other users' media requires `ADMIN` permissions.
  rpc DeleteMedia(Media) returns (google.protobuf.Empty) {}
  
  // Gets Groups. *Publicly accessible **or** Authenticated.*
  // Unauthenticated calls only return Groups of `GLOBAL_PUBLIC` visibility.
  rpc GetGroups(GetGroupsRequest) returns (GetGroupsResponse) {}

  // Creates a group with the current user as its admin. *Authenticated.*
  // Requires the `CREATE_GROUPS` permission.
  rpc CreateGroup(Group) returns (Group) {}

  // Update a Groups's information, default membership permissions or moderation. *Authenticated.*
  // Requires `ADMIN` permissions within the group, or `ADMIN` permissions for the user.
  rpc UpdateGroup(Group) returns (Group) {}

  // Delete a Group. *Authenticated.*
  // Requires `ADMIN` permissions within the group, or `ADMIN` permissions for the user.
  rpc DeleteGroup(Group) returns (google.protobuf.Empty) {}

  // Requests to join a group (or joins it), or sends an invite to the user. *Authenticated.*
  // Memberships and moderations are set to their defaults.
  rpc CreateMembership(Membership) returns (Membership) {}

  // Update aspects of a user's membership. *Authenticated.*
  // Updating permissions requires `ADMIN` permissions within the group, or `ADMIN` permissions for the user.
  // Updating moderation (approving/denying/banning) requires the same, or `MODERATE_USERS` permissions within the group.
  rpc UpdateMembership(Membership) returns (Membership) {}

  // Leave a group (or cancel membership request). *Authenticated.*
  rpc DeleteMembership(Membership) returns (google.protobuf.Empty) {}

  // Get Members (User+Membership) of a Group. *Authenticated.*
  rpc GetMembers(GetMembersRequest) returns (GetMembersResponse) {}

  // Gets Posts. *Publicly accessible **or** Authenticated.*
  // Unauthenticated calls only return Posts of `GLOBAL_PUBLIC` visibility.
  rpc GetPosts(GetPostsRequest) returns (GetPostsResponse) {}

  // Creates a Post. *Authenticated.*
  rpc CreatePost(Post) returns (Post) {}

  // Updates a Post. *Authenticated.*
  rpc UpdatePost(Post) returns (Post) {}

  // (TODO) (Soft) deletes a Post. Returns the deleted version of the Post. *Authenticated.*
  rpc DeletePost(Post) returns (Post) {}

  // Cross-post a Post to a Group. *Authenticated.*
  rpc CreateGroupPost(GroupPost) returns (GroupPost) {}

  // Group Moderators: Approve/Reject a GroupPost. *Authenticated.*
  rpc UpdateGroupPost(GroupPost) returns (GroupPost) {}

  // Delete a GroupPost. *Authenticated.*
  rpc DeleteGroupPost(GroupPost) returns (google.protobuf.Empty) {}

  // Get GroupPosts for a Post (and optional group). *Publicly accessible **or** Authenticated.*
  rpc GetGroupPosts(GetGroupPostsRequest) returns (GetGroupPostsResponse) {}

  // (TODO) Reply streaming interface
  rpc StreamReplies(Post) returns (stream Post);

  // Creates an Event. *Authenticated.*
  rpc CreateEvent(Event) returns (Event) {}

  // Gets Events. *Publicly accessible **or** Authenticated.*
  // Unauthenticated calls only return Events of `GLOBAL_PUBLIC` visibility.
  rpc GetEvents(GetEventsRequest) returns (GetEventsResponse) {}

  // Configure the server (i.e. the response to GetServerConfiguration). *Authenticated.*
  // Requires `ADMIN` permissions.
  rpc ConfigureServer(ServerConfiguration) returns (ServerConfiguration) {}

  // Delete ALL Media, Posts, Groups and Users except the user who performed the RPC. *Authenticated.*
  // Requires `ADMIN` permissions.
  // Note: Server Configuration is not deleted.
  rpc ResetData(google.protobuf.Empty) returns (google.protobuf.Empty) {}
}
