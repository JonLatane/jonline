syntax = "proto3";

package jonline;

import "google/protobuf/empty.proto";

import "authentication.proto";
import "users.proto";
import "media.proto";
import "posts.proto";
import "events.proto";
import "groups.proto";
import "federation.proto";
import "server_configuration.proto";

// The internet-facing service implementing the Jonline protocol,
// generally exposed on port 27707 or 443 (and, when using
// [HTTP-based client host negotiation](#http-based-client-host-negotiation-for-external-cdns), ports 80 and/or 443).
// A Jonline server is generally also expected to serve up web apps on ports 80/443, where
// select APIs are exposed with HTTP interfaces instead of gRPC.
// (Specifically, that [HTTP-based client host negotiation](#http-based-client-host-negotiation-for-external-cdns) again
// and [`Media`, for interoperability purposes](#jonline-Media).)
//
// ##### Authentication
// Jonline uses a standard OAuth2 flow for authentication, with rotating `access_token`s
// and `refresh_token`s.
// Authenticated calls require an `access_token` in request metadata to be included
// directly as the value of the `authorization` header (no `Bearer ` prefix).
//
// First, use the `CreateAccount` or `Login` RPCs to fetch (and store) an initial
// `refresh_token` and `access_token`. Clients should use the `access_token` until it expires,
// then use the `refresh_token` to call the `AccessToken` RPC for a new one. (The `AccessToken` RPC
// may, at random, also return a new `refresh_token`. If so, it should immediately replace the old
// one in client storage.)
//
// ##### Dumfederation
// Whereas other federated social networks (e.g. ActivityPub) have both client-server and server-server APIs,
// Jonline only has client-server APIs. The idea is that *all* of the federation data for a given Jonline server is simply the value of
// [`federation_info` in `ServerConfiguration`](#jonline-ServerConfiguration).
//
// That is to say: Servers can recommend other hosts. Clients can do what they will with that information.
// (Eventually, this will affect CORS policies for added security.)
// The aim here is to optimize for ease of server administration, and ease of understanding how the system works for users.
//
// ##### HTTP-based client host negotiation (for external CDNs)
// When first negotiating the gRPC connection to a host, say, `jonline.io`, before attempting
// to connect to `jonline.io` via gRPC on 27707/443, the client
// is expected to first attempt to `GET jonline.io/backend_host` over HTTP (port 80) or HTTPS (port 443)
// (depending upon whether the gRPC server is expected to have TLS). If the `backend_host` string resource
// is a valid domain, say, `jonline.io.itsj.online`, the client is expected to connect
// to `jonline.io.itsj.online` on port 27707/443 instead. To users, the server should still *generally* appear to 
// be `jonline.io`. The client can trust `jonline.io/backend_host` to always point to the correct backend host for
// `jonline.io`.
//
// This negotiation enables support for external CDNs as frontends. See https://jonline.io/about?section=cdn for
// more information about external CDN setup. Developers may wish to review the [React/Tamagui](https://github.com/JonLatane/jonline/blob/main/frontends/tamagui/packages/app/store/clients.ts) 
// and [Flutter](https://github.com/JonLatane/jonline/blob/main/frontends/flutter/lib/models/jonline_clients.dart) 
// client implementations of this negotiation.
//
// In the works to be released soon, Jonline will also support a "fully behind CDN" mode, where gRPC is served over port 443 and HTTP over port
// 80, with no HTTPS web page/media serving (other than the HTTPS that naturally underpins gRPC-Web). This is designed to use Cloudflare's gRPC
// proxy support. With this, both web and gRPC resources can live behind a CDN.
//
// ##### API Design Notes
// ###### Moderation and Visibility
// Jonline APIs are designed to support `Moderation` and `Visibility` controls at the level of individual entities. However, to keep things
// DRY, moderation and visibility controls are only implemented for `User`s, `Media`, `Group`s, and `Post`s.
//
// `Event`s and future `Post`-like types simply use the same implementation as their contained `Post`s. The intent here is to maximize
// both shared code and implementation robustness.
//
// ###### Composition Over Inheritance
// Jonline's APIs are designed using composition over inheritance. For instance, an `Event` contains
// a `Post` rather than extending it. This pattern fits well all the way from the data model (very boring, safe, and normalized), 
// through Rust code implementing APIs, to both functional React code and more-OOP Flutter code equally well.
//
// ###### Predictable Atomicity
// The use of composition over inheritance also means that Jonline APIs can be *predictably* non-atomic based on their compositional structure.
// For instance, `UpdatePost` is fully atomic.
//
// `UpdateEvent`, however, is non-atomic. Given that an `Event` has a `Post` and many `EventInstance`s, 
// `UpdateEvent` will first update the `Post` atomically (literally calling the `UpdatePost` RPC),
// then the `Event` atomically, and then finally process updates to its `EventInstance`s in a final atomic operation. 
//
// Because moderation/visibility lives at the `Post` level, this means that a developer error in `UpdateEvents` cannot prevent 
// visibility and moderation changes from being made in Events, even if there are errors elsewhere.
// This should prove a robust pattern for any future entities intended to be shareable at a Group level with visibility and
// moderation controls (for instance, `Sheet`, `SharedExpenseReport`, `SharedCalendar`, etc.). The entire architecture should promote this
// approach to predictable atomicity.
//
// #### gRPC API
service Jonline {
  // Get the version (from Cargo) of the Jonline service. *Publicly accessible.*
  rpc GetServiceVersion(google.protobuf.Empty) returns (GetServiceVersionResponse) {}
  // Gets the Jonline server's configuration. *Publicly accessible.*
  rpc GetServerConfiguration(google.protobuf.Empty) returns (ServerConfiguration) {}

  // Creates a user account and provides a `refresh_token` (along with an `access_token`). *Publicly accessible.*
  rpc CreateAccount(CreateAccountRequest) returns (RefreshTokenResponse) {}
  // Logs in a user and provides a `refresh_token` (along with an `access_token`). *Publicly accessible.*
  rpc Login(LoginRequest) returns (RefreshTokenResponse) {}
  // Gets a new `access_token` (and possibly a new `refresh_token`, which should replace the old one in client storage), given a `refresh_token`. *Publicly accessible.*
  rpc AccessToken(AccessTokenRequest) returns (AccessTokenResponse) {}
  // Gets the current user. *Authenticated.*
  rpc GetCurrentUser(google.protobuf.Empty) returns (User) {}
  // Resets the current user's - or, for admins, a given user's - password. *Authenticated.*
  rpc ResetPassword(ResetPasswordRequest) returns (google.protobuf.Empty) {}

  // Gets Media (Images, Videos, etc) uploaded/owned by the current user. *Authenticated.* To upload/download actual Media blob/binary data, use the [HTTP Media APIs](#media).
  rpc GetMedia(GetMediaRequest) returns (GetMediaResponse) {}
  // Deletes a media item by ID. *Authenticated.* Note that media may still be accessible for 12 hours after deletes are requested, as separate jobs clean it up from S3/MinIO.
  // Deleting other users' media requires `ADMIN` permissions.
  rpc DeleteMedia(Media) returns (google.protobuf.Empty) {}

  // Gets Users. *Publicly accessible **or** Authenticated.*
  // Unauthenticated calls only return Users of `GLOBAL_PUBLIC` visibility.
  rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {}
  // Update a user by ID. *Authenticated.*
  // Updating other users requires `ADMIN` permissions.
  rpc UpdateUser(User) returns (User) {}
  // Deletes a user by ID. *Authenticated.*
  // Deleting other users requires `ADMIN` permissions.
  rpc DeleteUser(User) returns (google.protobuf.Empty) {}

  // Follow (or request to follow) a user. *Authenticated.*
  rpc CreateFollow(Follow) returns (Follow) {}
  // Used to approve follow requests. *Authenticated.*
  rpc UpdateFollow(Follow) returns (Follow) {}
  // Unfollow (or unrequest) a user. *Authenticated.*
  rpc DeleteFollow(Follow) returns (google.protobuf.Empty) {}

  // Gets Groups. *Publicly accessible **or** Authenticated.*
  // Unauthenticated calls only return Groups of `GLOBAL_PUBLIC` visibility.
  rpc GetGroups(GetGroupsRequest) returns (GetGroupsResponse) {}
  // Creates a group with the current user as its admin. *Authenticated.*
  // Requires the `CREATE_GROUPS` permission.
  rpc CreateGroup(Group) returns (Group) {}
  // Update a Groups's information, default membership permissions or moderation. *Authenticated.*
  // Requires `ADMIN` permissions within the group, or `ADMIN` permissions for the user.
  rpc UpdateGroup(Group) returns (Group) {}
  // Delete a Group. *Authenticated.*
  // Requires `ADMIN` permissions within the group, or `ADMIN` permissions for the user.
  rpc DeleteGroup(Group) returns (google.protobuf.Empty) {}

  // Get Members (User+Membership) of a Group. *Publicly accessible **or** Authenticated.*
  rpc GetMembers(GetMembersRequest) returns (GetMembersResponse) {}
  // Requests to join a group (or joins it), or sends an invite to the user. *Authenticated.*
  // Memberships and moderations are set to their defaults.
  rpc CreateMembership(Membership) returns (Membership) {}
  // Update aspects of a user's membership. *Authenticated.*
  // Updating permissions requires `ADMIN` permissions within the group, or `ADMIN` permissions for the user.
  // Updating moderation (approving/denying/banning) requires the same, or `MODERATE_USERS` permissions within the group.
  rpc UpdateMembership(Membership) returns (Membership) {}
  // Leave a group (or cancel membership request). *Authenticated.*
  rpc DeleteMembership(Membership) returns (google.protobuf.Empty) {}

  // Gets Posts. *Publicly accessible **or** Authenticated.*
  // Unauthenticated calls only return Posts of `GLOBAL_PUBLIC` visibility.
  rpc GetPosts(GetPostsRequest) returns (GetPostsResponse) {}
  // Creates a Post. *Authenticated.*
  rpc CreatePost(Post) returns (Post) {}
  // Updates a Post. *Authenticated.*
  rpc UpdatePost(Post) returns (Post) {}
  // (TODO) (Soft) deletes a Post. Returns the deleted version of the Post. *Authenticated.*
  rpc DeletePost(Post) returns (Post) {}

  // Star a Post. *Unauthenticated.*
  rpc StarPost(Post) returns (Post) {}
  // Unstar a Post. *Unauthenticated.*
  rpc UnstarPost(Post) returns (Post) {}

  // Get GroupPosts for a Post (and optional group). *Publicly accessible **or** Authenticated.*
  rpc GetGroupPosts(GetGroupPostsRequest) returns (GetGroupPostsResponse) {}
  // Cross-post a Post to a Group. *Authenticated.*
  rpc CreateGroupPost(GroupPost) returns (GroupPost) {}
  // Group Moderators: Approve/Reject a GroupPost. *Authenticated.*
  rpc UpdateGroupPost(GroupPost) returns (GroupPost) {}
  // Delete a GroupPost. *Authenticated.*
  rpc DeleteGroupPost(GroupPost) returns (google.protobuf.Empty) {}

  // Gets Events. *Publicly accessible **or** Authenticated.*
  // Unauthenticated calls only return Events of `GLOBAL_PUBLIC` visibility.
  rpc GetEvents(GetEventsRequest) returns (GetEventsResponse) {}
  // Creates an Event. *Authenticated.*
  rpc CreateEvent(Event) returns (Event) {}
  // Updates an Event. *Authenticated.*
  rpc UpdateEvent(Event) returns (Event) {}
  // (TODO) (Soft) deletes a Event. Returns the deleted version of the Event. *Authenticated.*
  rpc DeleteEvent(Event) returns (Event) {}

  // Gets EventAttendances for an EventInstance. *Publicly accessible **or** Authenticated.*
  rpc GetEventAttendances(GetEventAttendancesRequest) returns (EventAttendances) {}
  // Upsert an EventAttendance. *Publicly accessible **or** Authenticated, with anonymous RSVP support.*
  // See [EventAttendance](#jonline-EventAttendance) and [AnonymousAttendee](#jonline-AnonymousAttendee)
  // for details. tl;dr: Anonymous RSVPs may updated/deleted with the `AnonymousAttendee.auth_token`
  // returned by this RPC (the client should save this for the user, and ideally, offer a link
  // with the token).
  rpc UpsertEventAttendance(EventAttendance) returns (EventAttendance) {}
  // Delete an EventAttendance.  *Publicly accessible **or** Authenticated, with anonymous RSVP support.*
  rpc DeleteEventAttendance(EventAttendance) returns (google.protobuf.Empty) {}

  // Federate the current user's profile with another user profile. *Authenticated*.
  rpc FederateProfile(FederatedAccount) returns (FederatedAccount) {}
  // *Authenticated*.
  rpc DefederateProfile(FederatedAccount) returns (google.protobuf.Empty) {}
  

  // Configure the server (i.e. the response to GetServerConfiguration). *Authenticated.*
  // Requires `ADMIN` permissions.
  rpc ConfigureServer(ServerConfiguration) returns (ServerConfiguration) {}

  // Delete ALL Media, Posts, Groups and Users except the user who performed the RPC. *Authenticated.*
  // Requires `ADMIN` permissions.
  // Note: Server Configuration is not deleted.
  rpc ResetData(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  // (TODO) Reply streaming interface. Currently just streams fake example data.
  rpc StreamReplies(Post) returns (stream Post);
}
