syntax = "proto3";

package jonline;

// import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
// import "users.proto";
import "visibility_moderation.proto";

// Valid GetPostsRequest formats:
//
// - `{[listing_type: PublicPosts]}`
//     - Get ServerPublic/GlobalPublic posts you can see based on your authorization (or lack thereof).
// - `{listing_type:MyGroupsPosts|FollowingPosts}`
//     - Get posts from groups you're a member of or from users you're following. Authorization required.
// - `{post_id:}`
//     - Get one post ,including preview data/
// - `{post_id:, reply_depth: 1}`
//     - Get replies to a post - only support for replyDepth=1 is done for now though.
// - `{listing_type: MyGroupsPosts|GroupPostsPendingModeration, group_id:}`
//     - Get posts/posts needing moderation for a group. Authorization may be required depending on group visibility.
// - `{author_user_id:, group_id:}`
//     - Get posts by a user for a group. (TODO)
// - `{listing_type: AuthorPosts, author_user_id:}`
//     - Get posts by a user. (TODO)
message GetPostsRequest {
  // Returns the single post with the given ID.
  optional string post_id = 1;
  // Limits results to replies to the given post.
  // optional string replies_to_post_id = 2;
  // Limits results to those by the given author user ID.
  optional string author_user_id = 2;
  optional string group_id = 3;
  // TODO: Implement support for this
  optional uint32 reply_depth = 4;
  PostListingType listing_type = 10;
  uint32 page = 15;
}

message GetPostsResponse {
  repeated Post posts = 1;
}

// A high-level enumeration of general ways of requesting posts.
enum PostListingType {
  // Gets SERVER_PUBLIC and GLOBAL_PUBLIC posts as is sensible.
  // Also usable for getting replies anywhere.
  PUBLIC_POSTS = 0;
  // Returns posts from users the user is following.
  FOLLOWING_POSTS = 1;
  // Returns posts from any group the user is a member of.
  MY_GROUPS_POSTS = 2;
  // Returns LIMITED posts that are directly addressed to the user.
  DIRECT_POSTS = 3;
  POSTS_PENDING_MODERATION = 4;

  // group_id parameter is required for these.
  GROUP_POSTS = 10;
  GROUP_POSTS_PENDING_MODERATION = 11;
}

// A request to create a post.
message CreatePostRequest {
  optional string title = 1;
  optional string link = 2;
  optional string content = 3;
  optional string reply_to_post_id = 4;
}

// A `Post` is a message that can be posted to the server. Its `visibility`
// as well as any associated `GroupPost`s and `UserPost`s determine what users
// see it and where.
//
// `Post`s are a fundamental unit of the system. `Event`s are a higher-level
// concept that are built on top of `Post`s.
message Post {
  // Unique ID of the post.
  string id = 1;
  // The author of the post. This is a smaller version of User.
  optional Author author = 2;
  // If this is a reply, this is the ID of the post it's replying to.
  optional string reply_to_post_id = 3;
  // The title of the post. This is invalid for replies.
  optional string title = 4;
  // The link of the post. This is invalid for replies.
  optional string link = 5;
  // The content of the post. This is required for replies.
  optional string content = 6;
  // The number of responses (replies *and* replies to replies, etc.) to this post.
  int32 response_count = 7;
  // The number of *direct* replies to this post.
  int32 reply_count = 8;
  // Hierarchical replies to this post.
  //
  // There will never be more than `reply_count` replies. However,
  // there may be fewer than `reply_count` replies if some replies are
  // hidden by moderation or visibility.
  // Replies are not generally loaded by default, but can be added to Posts
  // in the frontend.
  repeated Post replies = 9;
  // Preview image for the Post. Generally not returned by default.
  optional bytes preview_image = 10;
  // The visibility of the Post.
  Visibility visibility = 11;
  // The moderation of the Post.
  Moderation moderation = 12;
  // The number of groups this post is in.
  int32 group_count = 14;
  // When the post is returned in the context of a group_id parameter,
  // `current_group_post` is returned. It lets the UI know whether the post can be
  // cross-posted to a group, and of course, information about the cross-post
  // (time, moderation) if that's relevant.
  optional GroupPost current_group_post = 15;
  // Always returned, even if preview_image is not. Indicates whether the UI
  // should attempt to fetch a preview_image.
  bool preview_image_exists = 16;

  google.protobuf.Timestamp created_at = 20;
  optional google.protobuf.Timestamp updated_at = 21;
}

// Post-centric version of User. UI can cross-reference user details
// from its own cache (for things like admin/bot icons).
message Author {
  string user_id = 1;
  optional string username = 2;
}

// A `GroupPost` is a cross-post of a `Post` to a `Group`. It contains
// information about the moderation of the post in the group, as well as
// the time it was cross-posted and the user who did the cross-posting.
message GroupPost{
  string group_id = 1;
  string post_id = 2;
  string user_id = 3;
  Moderation group_moderation = 4;
  google.protobuf.Timestamp created_at = 5;
}

// A `UserPost` is a "direct share" of a `Post` to a `User`. Currently unused.
message UserPost{
  string group_id = 1;
  string user_id = 2;
  google.protobuf.Timestamp created_at = 3;
}

// Used for getting context about GroupPosts of an existing Post.
message GetGroupPostsRequest {
  string post_id = 1;
  optional string group_id = 2;
}

// Used for getting context about GroupPosts of an existing Post.
message GetGroupPostsResponse {
  repeated GroupPost group_posts = 1;
}
