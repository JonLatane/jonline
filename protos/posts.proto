syntax = "proto3";

package jonline;

// import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
// import "users.proto";
import "visibility_moderation.proto";

// Valid GetPostsRequest formats:
//
// - `{[listing_type: PublicPosts]}`
//     - Get ServerPublic/GlobalPublic posts you can see based on your authorization (or lack thereof).
// - `{listing_type:MyGroupsPosts|FollowingPosts}`
//     - Get posts from groups you're a member of or from users you're following. Authorization required.
// - `{post_id:}`
//     - Get one post ,including preview data/
// - `{post_id:, reply_depth: 1}`
//     - Get replies to a post - only support for replyDepth=1 is done for now though.
// - `{listing_type: MyGroupsPosts|GroupPostsPendingModeration, group_id:}`
//     - Get posts/posts needing moderation for a group. Authorization may be required depending on group visibility.
// - `{author_user_id:, group_id:}`
//     - Get posts by a user for a group. (TODO)
// - `{listing_type: AuthorPosts, author_user_id:}`
//     - Get posts by a user. (TODO)
message GetPostsRequest {
  // Returns the single post with the given ID.
  optional string post_id = 1;
  // Limits results to replies to the given post.
  // optional string replies_to_post_id = 2;
  // Limits results to those by the given author user ID.
  optional string author_user_id = 2;
  optional string group_id = 3;
  // TODO: Implement support for this
  optional uint32 reply_depth = 4;
  PostListingType listing_type = 10;
  uint32 page = 15;
}

message GetPostsResponse {
  repeated Post posts = 1;
}

// A high-level enumeration of general ways of requesting posts.
enum PostListingType {
  // Gets SERVER_PUBLIC and GLOBAL_PUBLIC posts as is sensible.
  // Also usable for getting replies anywhere.
  PUBLIC_POSTS = 0;
  // Returns posts from users the user is following.
  FOLLOWING_POSTS = 1;
  // Returns posts from any group the user is a member of.
  MY_GROUPS_POSTS = 2;
  // Returns `DIRECT` posts that are directly addressed to the user.
  DIRECT_POSTS = 3;
  POSTS_PENDING_MODERATION = 4;

  // group_id parameter is required for these.
  GROUP_POSTS = 10;
  GROUP_POSTS_PENDING_MODERATION = 11;
}

enum PostContext {
  POST = 0;
  REPLY = 1;
  EVENT = 2;
  EVENT_INSTANCE = 3;
}

// A `Post` is a message that can be posted to the server. Its `visibility`
// as well as any associated `GroupPost`s and `UserPost`s determine what users
// see it and where.
//
// `Post`s are also a fundamental unit of the system. They provide a building block
// of Visibility and Moderation management that is used throughout Posts, Replies, Events,
// and Event Instances.
message Post {
  // Unique ID of the post.
  string id = 1;
  // The author of the post. This is a smaller version of User.
  optional Author author = 2;
  // If this is a reply, this is the ID of the post it's replying to.
  optional string reply_to_post_id = 3;

  // The title of the post. This is invalid for replies.
  optional string title = 4;
  // The link of the post. This is invalid for replies.
  optional string link = 5;
  // The content of the post. This is required for replies.
  optional string content = 6;

  // The number of responses (replies *and* replies to replies, etc.) to this post.
  int32 response_count = 7;
  // The number of *direct* replies to this post.
  int32 reply_count = 8;
  // The number of groups this post is in.
  int32 group_count = 9;

  // List of Media IDs associated with this post. Order is preserved.
  repeated string media = 10;
  // Flag indicating whether Media has been generated for this Post.
  // Currently previews are generated for any Link post.
  bool media_generated = 11;
  // Flag indicating
  bool embed_link = 12;
  // Flag indicating a `LIMITED` or `SERVER_PUBLIC` post can be shared with groups and individuals,
  // and a `DIRECT` post can be shared with individuals.
  bool shareable = 13;
  // Context of the Post (`POST`, `REPLY`, `EVENT`, or `EVENT_INSTANCE`.)
  PostContext context = 14;
  // The visibility of the Post.
  Visibility visibility = 15;
  // The moderation of the Post.
  Moderation moderation = 16;

  // If the Post was retrieved from GetPosts with a group_id, the GroupPost
  // metadata may be returned along with the Post.
  optional GroupPost current_group_post = 18;

  // Hierarchical replies to this post.
  //
  // There will never be more than `reply_count` replies. However,
  // there may be fewer than `reply_count` replies if some replies are
  // hidden by moderation or visibility.
  // Replies are not generally loaded by default, but can be added to Posts
  // in the frontend.
  repeated Post replies = 19;

  google.protobuf.Timestamp created_at = 20;
  optional google.protobuf.Timestamp updated_at = 21;
  optional google.protobuf.Timestamp published_at = 22;
  google.protobuf.Timestamp last_activity_at = 23;
}

// Post-centric version of User. UI can cross-reference user details
// from its own cache (for things like admin/bot icons).
message Author {
  string user_id = 1;
  optional string username = 2;
}

// A `GroupPost` is a cross-post of a `Post` to a `Group`. It contains
// information about the moderation of the post in the group, as well as
// the time it was cross-posted and the user who did the cross-posting.
message GroupPost{
  string group_id = 1;
  string post_id = 2;
  string user_id = 3;
  Moderation group_moderation = 4;
  google.protobuf.Timestamp created_at = 5;
}

// A `UserPost` is a "direct share" of a `Post` to a `User`. Currently unused.
message UserPost{
  string group_id = 1;
  string user_id = 2;
  google.protobuf.Timestamp created_at = 3;
}

// Used for getting context about GroupPosts of an existing Post.
message GetGroupPostsRequest {
  string post_id = 1;
  optional string group_id = 2;
}

// Used for getting context about GroupPosts of an existing Post.
message GetGroupPostsResponse {
  repeated GroupPost group_posts = 1;
}
