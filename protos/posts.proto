syntax = "proto3";

package jonline;

// import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
// import "users.proto";
import "visibility_moderation.proto";

// Valid GetPostsRequest formats:
// - {[listing_type: PublicPosts]}                  (get ServerPublic/GlobalPublic posts you can see)
// - {listing_type:MyGroupsPosts|FollowingPosts}    (auth required)
// - {post_id:}                                     (get one post including preview data)
// - {post_id:, reply_depth: 1}                     (get replies to a post - only support for replyDepth=1 for now tho)
// - {listing_type: MyGroupsPosts|
//      GroupPostsPendingModeration,
//      group_id:}                                  (get posts/posts needing moderation for a group)
// - {author_user_id:, group_id:}                   (get posts by a user for a group)
// - {listing_type: AuthorPosts, author_user_id:}   (TODO: get posts by a user)
message GetPostsRequest {
  // Returns the single post with the given ID.
  optional string post_id = 1;
  // Limits results to replies to the given post.
  // optional string replies_to_post_id = 2;
  // Limits results to those by the given author user ID.
  optional string author_user_id = 2;
  optional string group_id = 3;
  // TODO: Implement support for this
  optional uint32 reply_depth = 4;
  PostListingType listing_type = 10;
}

message GetPostsResponse {
  repeated Post posts = 1;
}

enum PostListingType {
  // Gets SERVER_PUBLIC and GLOBAL_PUBLIC posts as is sensible.
  // Also usable for getting replies anywhere.
  PUBLIC_POSTS = 0;
  // Returns posts from users the user is following.
  FOLLOWING_POSTS = 1;
  // Returns posts from any group the user is a member of.
  MY_GROUPS_POSTS = 2;
  // Returns LIMITED posts that are directly addressed to the user.
  DIRECT_POSTS = 3;
  POSTS_PENDING_MODERATION = 4;

  // group_id parameter is required for these.
  GROUP_POSTS = 10;
  GROUP_POSTS_PENDING_MODERATION = 11;
}


message CreatePostRequest {
  optional string title = 1;
  optional string link = 2;
  optional string content = 3;
  optional string reply_to_post_id = 4;
}

message Post {
  string id = 1;
  optional Author author = 2;
  optional string reply_to_post_id = 3;
  optional string title = 4;
  optional string link = 5;
  optional string content = 6;
  int32 response_count = 7;
  int32 reply_count = 8;
  repeated Post replies = 9;
  optional bytes preview_image = 10;
  Visibility visibility = 11;
  Moderation moderation = 12;

  int32 group_count = 14;
  // When the post is returned in the context of a group_id parameter,
  // this can be returned. It lets the UI know whether the post can be
  // cross-posted to a group, and of course, *about* the cross-post
  // (time, moderation) if that's relevant.
  optional GroupPost current_group_post = 15;

  google.protobuf.Timestamp created_at = 20;
  optional google.protobuf.Timestamp updated_at = 21;
}

// Post-centric version of User. UI can cross-reference user details
// from its own cache (for things like admin/bot icons).
message Author {
  string user_id = 1;
  optional string username = 2;
}

message GroupPost{
  string group_id = 1;
  string post_id = 2;
  string user_id = 3;
  Moderation group_moderation = 4;
  google.protobuf.Timestamp created_at = 5;
}

message UserPost{
  string group_id = 1;
  string user_id = 2;
  google.protobuf.Timestamp created_at = 3;
}
