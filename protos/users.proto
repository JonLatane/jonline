syntax = "proto3";

package jonline;

import "google/protobuf/timestamp.proto";
import "permissions.proto";
import "visibility_moderation.proto";
import "media.proto";
import "federation.proto";

// Model for a Jonline user. This user may have [`Media`](#jonline-Media), [`Group`](#jonline-Group) [`Membership`](#jonline-Membership)s,
// [`Post`](#jonline-Post)s, [`Event`](#jonline-Event)s, and other objects associated with them.
message User {
  // Permanent string ID for the user. Will never contain a `@` symbol.
  string id = 1;
  // Impermanent string username for the user. Will never contain a `@` symbol.
  string username = 2;
  // The user's real name.
  string real_name = 3;
  // The user's email address.
  optional ContactMethod email = 4;
  // The user's phone number.
  optional ContactMethod phone = 5;
  // The user's permissions. See [`Permission`](#jonline-Permission) for details.
  repeated Permission permissions = 6;
  // The user's avatar. Note that its visibility is managed by the User and thus
  // it may not be accessible to the current user.
  optional MediaReference avatar = 7;
  // The user's bio.
  string bio = 8;

  // User visibility is a bit different from Post visibility.
  // LIMITED means the user can only be seen by users they follow
  // (as opposed to Posts' individualized visibilities).
  // PRIVATE visibility means no one can see the user.
  // See server_configuration.proto for details about PRIVATE
  // users' ability to creep.
  Visibility visibility = 20;
  // The user's moderation status. See [`Moderation`](#jonline-Moderation) for details.
  Moderation moderation = 21;

  // Only PENDING or UNMODERATED are valid.
  Moderation default_follow_moderation = 30;
  // The number of users following this user.
  optional int32 follower_count = 31;
  // The number of users this user is following.
  optional int32 following_count = 32;
  // The number of groups this user is a member of.
  optional int32 group_count = 33;
  // The number of posts this user has made.
  optional int32 post_count = 34;
  // The number of responses to `Post`s and `Event`s this user has made.
  optional int32 response_count = 35;
  // The number of events this user has created.
  optional int32 event_count = 36;

  // Presence indicates the current user is following
  // or has a pending follow request for this user.
  optional Follow current_user_follow = 50;
  // Presence indicates this user is following or has
  // a pending follow request for the current user.
  optional Follow target_current_user_follow = 51;
  // Returned by `GetMembers` calls, for use when managing [`Group`](#jonline-Group) [`Membership`](#jonline-Membership)s. 
  // The `Membership` should match the `Group` from the originating [`GetMembersRequest`](#jonline-GetMembersRequest),
  // providing whether the user is a member of that `Group`, has been invited, requested to join, etc..
  optional Membership current_group_membership = 52;

  // Indicates that `federated_profiles` has been loaded.
  bool has_advanced_data = 80;

  // Federated profiles for the user. *Not always loaded.* This is a list of profiles from other servers
  // that the user has connected to their account. Managed by the user via
  // `Federate`
  repeated FederatedAccount federated_profiles = 81;

  // The time the user was created.
  google.protobuf.Timestamp created_at = 100;
  // The time the user was last updated.
  optional google.protobuf.Timestamp updated_at = 101;
}

// Post/authorship-centric version of User. UI can cross-reference user details
// from its own cache (for things like admin/bot icons).
message Author {
  // Permanent string ID for the user. Will never contain a `@` symbol.
  string user_id = 1;
  // Impermanent string username for the user. Will never contain a `@` symbol.
  optional string username = 2;
  // The user's avatar.
  optional MediaReference avatar = 3;
  optional string real_name = 4;
  repeated Permission permissions = 5;
}

// Model for a user's follow of another user.
message Follow {
  // The follower in the relationship.
  string user_id = 1;
  // The user being followed.
  string target_user_id = 2;
  // Tracks whether the target user needs to approve the follow.
  Moderation target_user_moderation = 3;
  // The time the follow was created.
  google.protobuf.Timestamp created_at = 4;
  // The time the follow was last updated.
  optional google.protobuf.Timestamp updated_at = 5;
}

// Model for a user's membership in a group. Memberships are generically
// included as part of User models when relevant in Jonline, but UIs should use the group_id
// to reconcile memberships with groups.
message Membership {
  // The member (or requested/invited member).
  string user_id = 1;
  // The group the membership pertains to.
  string group_id = 2;
  // Valid Membership Permissions are:  `VIEW_POSTS`, `CREATE_POSTS`, `MODERATE_POSTS`, `VIEW_EVENTS`, CREATE_EVENTS, `MODERATE_EVENTS`, `ADMIN`, `RUN_BOTS`, and `MODERATE_USERS`
  repeated Permission permissions = 3;
  // Tracks whether group moderators need to approve the membership.
  Moderation group_moderation = 4;
  // Tracks whether the user needs to approve the membership.
  Moderation user_moderation = 5;
  // The time the membership was created.
  google.protobuf.Timestamp created_at = 6;
  // The time the membership was last updated.
  optional google.protobuf.Timestamp updated_at = 7;
}

// A contact method for a user. Models designed to support verification,
// but verification RPCs are not yet implemented.
message ContactMethod {
  // Either a `mailto:` or `tel:` URL.
  optional string value = 1;
  // The visibility of the contact method.
  Visibility visibility = 2;
  // Server-side flag indicating whether the server can verify 
  // (and otherwise interact via) the contact method.
  bool supported_by_server = 3;
  // Indicates the user has completed verification of the contact method.
  // Verification requires `supported_by_server` to be `true`.
  bool verified = 4;
}

// Request to get one or more users by a variety of parameters.
// Supported parameters depend on `listing_type`.
message GetUsersRequest {
  // The username to search for. Substrings are supported.
  optional string username = 1;
  // The user ID to search for.
  optional string user_id = 2;

  // The page of results to return. Pages are 0-indexed.
  optional int32 page = 99;
  // The number of results to return per page.
  UserListingType listing_type = 100;
}

// Ways of listing users.
enum UserListingType {
  // Get all users.
  EVERYONE = 0;
  // Get users the current user is following.
  FOLLOWING = 1;
  // Get users who follow and are followed by the current user.
  FRIENDS = 2;
  // Get users who follow the current user.
  FOLLOWERS = 3;
  // Get users who have requested to follow the current user.
  FOLLOW_REQUESTS = 4;

  // [TODO] Gets admins for a server.
  ADMINS = 10;
}

// Response to a `GetUsersRequest`.
message GetUsersResponse {
  // The users matching the request.
  repeated User users = 1;
  // Whether there are more pages of results.
  bool has_next_page = 2;
}
